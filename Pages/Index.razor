@page "/"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.TreeGrid;
@using System.Dynamic
@using System.Diagnostics

<SfGantt @ref="Gantt"
         ID="Gantt"
         Toolbar="@(new List<string>() { "CollapseAll", "ExpandAll"})"
         DataSource="@TaskCollection"
         EnableVirtualization="true"
         ProjectStartDate="ProjectStartDate"
         ProjectEndDate="ProjectEndDate"
         AllowSelection="true"
         EnableContextMenu="true"
         AllowFiltering="true"
         AllowSorting="true"
         AllowResizing="true"
         AllowUnscheduledTasks="true"
         ShowColumnMenu="true"
         AllowReordering="true"
         AllowRowDragAndDrop="true"
         Height="450px"
         Width="1200px">
    <GanttTaskFields Id="ID"
                     Name="TaskName"
                     StartDate="StartDate"
                     EndDate="EndDate"
                     Duration="Duration"
                     Progress="Progress"
                     ParentID="ParentId">
    </GanttTaskFields>

    <GanttEditSettings AllowAdding="true"
                       AllowDeleting="true"
                       AllowEditing="true"
                       AllowTaskbarEditing="true"
                       ShowDeleteConfirmDialog="true"
                       Mode="Syncfusion.Blazor.Gantt.EditMode.Auto">
    </GanttEditSettings>

    <GanttLabelSettings LeftLabel="TaskName" TValue="TaskData"></GanttLabelSettings>
    <GanttEvents Created="OnGanttCreated" Expanding="Expanding" Expanded="expanded" Collapsing="collapsing" Collapsed="collapsed" RowSelected="selected" RowSelecting="selecting" TValue="TaskData"></GanttEvents>
    <GanttSplitterSettings Position="30%"></GanttSplitterSettings>
</SfGantt>

<div>
    <p>Start : @startTime.ToString()</p>
</div>
<div>
    <p>End : @runningTime.ToString()</p>
</div>

@code{ public SfGantt<TaskData> Gantt;
    SfGantt<TaskData> Obj { get; set; }
    public DateTime ProjectStartDate = new DateTime(2017, 01, 01);
    public DateTime ProjectEndDate = new DateTime(2017, 01, 30);
    public List<TaskData> TaskCollection { get; set; }
    public DateTime? StartAt { get; private set; }
    public DateTime? EndAt { get; private set; }

    public  Stopwatch watch = System.Diagnostics.Stopwatch.StartNew();
	public string runningTime = string.Empty;
    public string startTime = string.Empty;

    private void OnGanttCreated(object sender)
    {
        EndAt = DateTime.Now;
        TimeSpan ts = (TimeSpan)(EndAt - StartAt);
        runningTime = ts.TotalMilliseconds.ToString();
    }
    protected override void OnInitialized()
    {
        watch.Reset();
        watch.Start();
        StartAt = DateTime.Now;
        this.TaskCollection = VirtualData.GetTreeVirtualData();
        startTime = watch.Elapsed.TotalMilliseconds.ToString();
    }
    //ExPanding event
    private void Expanding(Syncfusion.Blazor.TreeGrid.RowExpandingEventArgs<TaskData> args)
    {
        StartAt = DateTime.Now;
        watch.Reset();
        watch.Start();
        startTime = watch.Elapsed.TotalMilliseconds.ToString();
    }

    private void expanded(Syncfusion.Blazor.TreeGrid.RowExpandedEventArgs<TaskData> args)
    {
        EndAt = DateTime.Now;
        TimeSpan ts = (TimeSpan)(EndAt - StartAt);
        runningTime = ts.TotalMilliseconds.ToString();
    }

    //Collapsing

    private void collapsing(Syncfusion.Blazor.TreeGrid.RowCollapsingEventArgs<TaskData> args)
    {
        StartAt = DateTime.Now;
        watch.Reset();
        watch.Start();
        startTime = watch.Elapsed.TotalMilliseconds.ToString();
    }

    private void collapsed(Syncfusion.Blazor.TreeGrid.RowCollapsedEventArgs<TaskData> args)
    {
        EndAt = DateTime.Now;
        TimeSpan ts = (TimeSpan)(EndAt - StartAt);
        runningTime = ts.TotalMilliseconds.ToString();
    }

    //Selection

    private void selecting(RowSelectingEventArgs<TaskData> args)
    {
        watch.Restart();
    }

    private void selected(RowSelectEventArgs<TaskData> args)
    {
        watch.Stop();
        runningTime = watch.Elapsed.TotalMilliseconds.ToString();
    }

    public class VirtualData
    {
        public static List<TaskData> GetTreeVirtualData()
        {
            List<TaskData> DataCollection = new List<TaskData>();
            Random rand = new Random();
            var x = 0;
            for (var i = 1; i <= 500 ; i++)
            {
                var name = rand.Next(0, 100);
                TaskData Parent = new TaskData()
                {
                    ID = ++x,
                    TaskName = "Task " + x,
                    StartDate = new DateTime(2017, 1, 9),
                    EndDate = new DateTime(2017, 1, 13),
                    Duration = "5",
                    Progress = rand.Next(100),
                    ParentId = null,
                };
                DataCollection.Add(Parent);
                for (var j = 1; j <= 4; j++)
                {
                    var childName = rand.Next(0, 100);
                    DataCollection.Add(new TaskData()
                    {
                        ID = ++x,
                        TaskName = "Task " + x,
                        StartDate = new DateTime(2017, 1, 9),
                        EndDate = new DateTime(2019, 1, 13),
                        Duration = "5",
                        Progress = rand.Next(100),
                        ParentId = Parent.ID
                    });
                }
            }
            return DataCollection;
        }
    }
    public class TaskData
    {
        public int ID { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
    } }